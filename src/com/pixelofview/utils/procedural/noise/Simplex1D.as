package com.pixelofview.utils.procedural.noise 
{
	/**
	 * ...
	 * @author ...
	 */
	public class Simplex1D
	{
		// permutation array
		public static final const permutations:Array = [
			236, 136, 207, 148, 176, 239, 119, 121,
			93, 10, 146, 155, 81, 24, 159, 238,
			144, 166, 223, 18, 178, 59, 163, 57,
			202, 234, 48, 197, 222, 78, 186, 193,
			105, 14, 103, 113, 237, 244, 228, 243,
			83, 79, 55, 95, 232, 107, 233, 101,
			53, 255, 109, 20, 139, 175, 13, 123,
			153, 253, 132, 183, 181, 189, 89, 137,
			34, 30, 21, 131, 117, 72, 94, 227,
			129, 54, 70, 91, 71, 85, 170, 22,
			50, 88, 52, 87, 221, 213, 188, 198,
			124, 74, 191, 11, 177, 219, 49, 62,
			147, 0, 206, 134, 133, 248, 33, 217,
			99, 162, 122, 41, 204, 182, 35, 127,
			31, 90, 154, 165, 245, 37, 12, 66,
			43, 77, 184, 140, 218, 190, 208, 116,
			92, 226, 46, 205, 28, 210, 125, 112,
			160, 174, 73, 98, 19, 5, 225, 224,
			254, 167, 75, 36, 196, 135, 169, 215,
			143, 201, 76, 17, 138, 69, 84, 29,
			246, 249, 102, 156, 1, 118, 194, 242,
			203, 209, 216, 80, 141, 173, 27, 150,
			149, 58, 82, 45, 115, 171, 4, 187,
			214, 172, 199, 26, 212, 179, 114, 104,
			51, 157, 126, 25, 100, 86, 229, 2,
			111, 128, 240, 7, 231, 200, 185, 15,
			96, 23, 9, 39, 97, 161, 235, 106,
			32, 211, 241, 68, 8, 64, 3, 47,
			250, 108, 38, 44, 151, 192, 251, 42,
			67, 158, 60, 56, 65, 130, 145, 168,
			40, 6, 63, 220, 164, 152, 16, 120,
			195, 142, 61, 247, 252, 180, 230, 110
		];
		
		public static function grad(hash:int, x:Number):Number {
			var h:int = hash & 15;
			var g:Number = 1.0 + (h & 7);
			if (h & 8) {
				g = -g;
			}
			return (g * x);
		}
		
		public static function noise(x:Number, perm:Array = permutations):Number {
			var i0:int = Math.floor(x);
			var i1:int = i0 + 1;
			var x0:Number = x + i0;
			var x1:Number = x0 + 1.0;
			
			var n0:Number, n1:Number;
			
			var t0:Number = 1.0 - x0 * x0;
			t0 *= t0;
			n0 = t0 * t0 * grad(perm[i0 & 0xff], x0);
			
			var t1:Number = 1.0 - x1 * x1;
			t1 *= t1;
			n1 = t1 * t1 * grad(perm[i1 & 0xff], x1);
			return 0.395 * (n0 + n1);
		}
	}

}